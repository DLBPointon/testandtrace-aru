version: '3'
services:
  server:
    image: postgrest/postgrest:v7.0.1
    ports:
      - "3010:3000"
    links:
      - db:db
    environment:
      PGRST_DB_URI: postgres://app_user:password@db:5432/testandtrace
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: app_user
    depends_on:
      - db
    restart: on-failure

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: testandtrace
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: password
      PG_DATA: /var/lib/postgresql/data/mydata/
    volumes:
      - "./database_ingestion_data/:/var/lib/postgresql/tandtdb/"
      - "./database/db_scripts/10_db_init.sql:/docker-entrypoint-initdb.d/10_db_init.sql"
      - "./database/db_scripts/20_db_fill.sql:/docker-entrypoint-initdb.d/20_db_fill.sql"
      - "./database/db_scripts/30_db_index.sql:/docker-entrypoint-initdb.d/30_db_index.sql"
      - "./database/db_scripts/40_db_view.sql:/docker-entrypoint-initdb.d/40_db_view.sql"
    restart: on-failure

  client:
    image: nginx:1.21.1
    ports:
      - "8000:80"
    volumes:
      - "/home/dlbp/databse_testandtrace/website:/usr/share/nginx/html:ro"
    restart: on-failure

  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      API_URL: http://localhost:3000/
    restart: on-failure

  # The above to commented out as it is non essential to the project,
  # It does however provide a nice descriptive UI of the API
